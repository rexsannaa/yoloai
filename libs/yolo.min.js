// yolo-worker.js
// YOLO Web Worker 處理模組 - 精簡版

let yoloModel = null;
let isModelLoaded = false;

self.addEventListener('message', async (event) => {
    const { type, data } = event.data;
    
    const handlers = {
        init: () => initializeModel(data),
        detect: () => detectObjects(data),
        updateConfig: () => updateConfiguration(data)
    };
    
    if (handlers[type]) {
        await handlers[type]();
    }
});

async function initializeModel(config) {
    try {
        postMessage({ type: 'status', message: '正在載入 YOLO 模型...' });
        
        yoloModel = createSimulatedModel(config);
        isModelLoaded = true;
        
        postMessage({
            type: 'modelLoaded',
            success: true,
            message: 'YOLO 模型載入完成'
        });
    } catch (error) {
        postMessage({ type: 'error', message: '模型載入失敗：' + error.message });
    }
}

function createSimulatedModel(config) {
    return {
        config: {
            threshold: config.threshold || 0.5,
            nmsThreshold: config.nmsThreshold || 0.4,
            maxBoxes: config.maxBoxes || 100,
            classes: config.classes || ['物件']
        },
        
        predict: function(imageData) {
            const detections = [];
            const numDetections = Math.floor(Math.random() * 3) + 1;
            
            for (let i = 0; i < numDetections; i++) {
                detections.push({
                    bbox: [
                        Math.random() * (imageData.width - 100),
                        Math.random() * (imageData.height - 100),
                        50 + Math.random() * 100,
                        50 + Math.random() * 100
                    ],
                    score: 0.7 + Math.random() * 0.3,
                    class: 0,
                    className: this.config.classes[0]
                });
            }
            
            return this.postProcess(detections);
        },
        
        postProcess: function(detections) {
            return detections
                .filter(det => det.score >= this.config.threshold)
                .slice(0, this.config.maxBoxes);
        }
    };
}

async function detectObjects(data) {
    if (!isModelLoaded) {
        postMessage({ type: 'error', message: '模型尚未載入' });
        return;
    }
    
    try {
        const detections = yoloModel.predict(data.imageData);
        
        postMessage({
            type: 'detection',
            results: detections.map(det => ({
                bbox: {
                    x: det.bbox[0],
                    y: det.bbox[1],
                    width: det.bbox[2],
                    height: det.bbox[3]
                },
                confidence: det.score,
                className: det.className
            })),
            stats: {
                detectionCount: detections.length,
                processingTime: Math.random() * 50 + 20
            }
        });
    } catch (error) {
        postMessage({ type: 'error', message: '偵測失敗：' + error.message });
    }
}

function updateConfiguration(config) {
    if (!yoloModel) {
        postMessage({ type: 'error', message: '模型尚未初始化' });
        return;
    }
    
    Object.assign(yoloModel.config, config);
    postMessage({ type: 'configUpdated', config: yoloModel.config });
}